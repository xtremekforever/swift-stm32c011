// Generated by svd2swift.

import MMIO

/// IWDG register block
@RegisterBlock
public struct IWDG: Sendable {
    /// IWDG key register
    @RegisterBlock(offset: 0x0)
    public var kr: Register<KR>

    /// IWDG prescaler register
    @RegisterBlock(offset: 0x4)
    public var pr: Register<PR>

    /// IWDG reload register
    @RegisterBlock(offset: 0x8)
    public var rlr: Register<RLR>

    /// IWDG status register
    @RegisterBlock(offset: 0xc)
    public var sr: Register<SR>

    /// IWDG window register
    @RegisterBlock(offset: 0x10)
    public var winr: Register<WINR>
}

extension IWDG {
    /// IWDG key register
    @Register(bitWidth: 32)
    public struct KR {
        /// Key value (write only, read 0x0000)
        /// These bits must be written by software at regular intervals with the key value 0xAAAA, otherwise the watchdog generates a reset when the counter reaches 0.
        /// Writing the key value 0x5555 to enable access to the IWDG_PR, IWDG_RLR and IWDG_WINR registers (see )
        /// Writing the key value 0xCCCC starts the watchdog (except if the hardware watchdog option is selected)
        @WriteOnly(bits: 0..<16)
        public var key: KEY
    }

    /// IWDG prescaler register
    @Register(bitWidth: 32)
    public struct PR {
        /// Prescaler divider
        /// These bits are write access protected see . They are written by software to select the prescaler divider feeding the counter clock. PVU bit of the must be reset in order to be able to change the prescaler divider.
        /// Note: Reading this register returns the prescaler value from the VDD voltage domain. This value may not be up to date/valid if a write operation to this register is ongoing. For this reason the value read from this register is valid only when the PVU bit in the status register (IWDG_SR) is reset.
        @ReadWrite(bits: 0..<3)
        public var pr_field: PR_FIELD
    }

    /// IWDG reload register
    @Register(bitWidth: 32)
    public struct RLR {
        /// Watchdog counter reload value
        /// These bits are write access protected see . They are written by software to define the value to be loaded in the watchdog counter each time the value 0xAAAA is written in the . The watchdog counter counts down from this value. The timeout period is a function of this value and the clock prescaler. Refer to the datasheet for the timeout information.
        /// The RVU bit in the must be reset to be able to change the reload value.
        /// Note: Reading this register returns the reload value from the VDD voltage domain. This value may not be up to date/valid if a write operation to this register is ongoing on it. For this reason the value read from this register is valid only when the RVU bit in the status register (IWDG_SR) is reset.
        @ReadWrite(bits: 0..<12)
        public var rl: RL
    }

    /// IWDG status register
    @Register(bitWidth: 32)
    public struct SR {
        /// Watchdog prescaler value update
        /// This bit is set by hardware to indicate that an update of the prescaler value is ongoing. It is reset by hardware when the prescaler update operation is completed in the VDD voltage domain (takes up to five LSI cycles).
        /// Prescaler value can be updated only when PVU bit is reset.
        @ReadOnly(bits: 0..<1)
        public var pvu: PVU

        /// Watchdog counter reload value update
        /// This bit is set by hardware to indicate that an update of the reload value is ongoing. It is reset by hardware when the reload value update operation is completed in the VDD voltage domain (takes up to five LSI cycles).
        /// Reload value can be updated only when RVU bit is reset.
        @ReadOnly(bits: 1..<2)
        public var rvu: RVU

        /// Watchdog counter window value update
        /// This bit is set by hardware to indicate that an update of the window value is ongoing. It is reset by hardware when the reload value update operation is completed in the VDD voltage domain (takes up to five LSI cycles).
        /// Window value can be updated only when WVU bit is reset.
        @ReadOnly(bits: 2..<3)
        public var wvu: WVU
    }

    /// IWDG window register
    @Register(bitWidth: 32)
    public struct WINR {
        /// Watchdog counter window value
        /// These bits are write access protected, see , they contain the high limit of the window value to be compared with the downcounter.
        /// To prevent a reset, the downcounter must be reloaded when its value is lower than the window register value and greater than 0x0
        /// The WVU bit in the must be reset in order to be able to change the reload value.
        /// Note: Reading this register returns the reload value from the VDD voltage domain. This value may not be valid if a write operation to this register is ongoing. For this reason the value read from this register is valid only when the WVU bit in the (IWDG_SR) is reset.
        @ReadWrite(bits: 0..<12)
        public var win: WIN
    }
}
