// Generated by svd2swift.

import MMIO

/// Cyclic redundancy check calculation unit
@RegisterBlock
public struct CRC: Sendable {
    /// CRC data register
    @RegisterBlock(offset: 0x0)
    public var dr: Register<DR>

    /// CRC independent data register
    @RegisterBlock(offset: 0x4)
    public var idr: Register<IDR>

    /// CRC control register
    @RegisterBlock(offset: 0x8)
    public var cr: Register<CR>

    /// CRC initial value
    @RegisterBlock(offset: 0x10)
    public var `init`: Register<INIT>

    /// CRC polynomial
    @RegisterBlock(offset: 0x14)
    public var pol: Register<POL>
}

extension CRC {
    /// CRC data register
    @Register(bitWidth: 32)
    public struct DR {
        /// Data register bits
        /// This register is used to write new data to the CRC calculator.
        /// It holds the previous CRC calculation result when it is read.
        /// If the data size is less than 32 bits, the least significant bits are used to write/read the correct value.
        @ReadWrite(bits: 0..<32)
        public var dr_field: DR_FIELD
    }

    /// CRC independent data register
    @Register(bitWidth: 32)
    public struct IDR {
        /// General-purpose 32-bit data register bits
        /// These bits can be used as a temporary storage location for four bytes.
        /// This register is not affected by CRC resets generated by the RESET bit in the CRC_CR register
        @ReadWrite(bits: 0..<32)
        public var gpdr: GPDR
    }

    /// CRC control register
    @Register(bitWidth: 32)
    public struct CR {
        /// RESET bit
        /// This bit is set by software to reset the CRC calculation unit and set the data register to the value stored in the CRC_INIT register. This bit can only be set, it is automatically cleared by hardware
        @ReadWrite(bits: 0..<1)
        public var reset: RESET

        /// Polynomial size
        /// These bits control the size of the polynomial.
        @ReadWrite(bits: 3..<5)
        public var polysize: POLYSIZE

        /// Reverse input data
        /// These bits control the reversal of the bit order of the input data
        @ReadWrite(bits: 5..<7)
        public var rev_in: REV_IN

        /// Reverse output data
        /// This bit controls the reversal of the bit order of the output data.
        @ReadWrite(bits: 7..<8)
        public var rev_out: REV_OUT
    }

    /// CRC initial value
    @Register(bitWidth: 32)
    public struct INIT {
        /// Programmable initial CRC value
        /// This register is used to write the CRC initial value.
        @ReadWrite(bits: 0..<32)
        public var crc_init: CRC_INIT
    }

    /// CRC polynomial
    @Register(bitWidth: 32)
    public struct POL {
        /// Programmable polynomial
        /// This register is used to write the coefficients of the polynomial to be used for CRC calculation.
        /// If the polynomial size is less than 32 bits, the least significant bits have to be used to program the correct value.
        @ReadWrite(bits: 0..<32)
        public var pol_field: POL_FIELD
    }
}
