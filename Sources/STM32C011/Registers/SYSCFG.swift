// Generated by svd2swift.

import MMIO

/// SYSCFG register block
@RegisterBlock
public struct SYSCFG: Sendable {
    /// SYSCFG configuration register 1
    @RegisterBlock(offset: 0x0)
    public var syscfg_cfgr1: Register<SYSCFG_CFGR1>

    /// SYSCFG configuration register 2
    @RegisterBlock(offset: 0x18)
    public var syscfg_cfgr2: Register<SYSCFG_CFGR2>

    /// SYSCFG configuration register 3
    @RegisterBlock(offset: 0x3c)
    public var syscfg_cfgr3: Register<SYSCFG_CFGR3>

    /// SYSCFG interrupt line 0 status register
    @RegisterBlock(offset: 0x80)
    public var syscfg_itline0: Register<SYSCFG_ITLINE0>

    /// SYSCFG interrupt line 2 status register
    @RegisterBlock(offset: 0x88)
    public var syscfg_itline2: Register<SYSCFG_ITLINE2>

    /// SYSCFG interrupt line 3 status register
    @RegisterBlock(offset: 0x8c)
    public var syscfg_itline3: Register<SYSCFG_ITLINE3>

    /// SYSCFG interrupt line 4 status register
    @RegisterBlock(offset: 0x90)
    public var syscfg_itline4: Register<SYSCFG_ITLINE4>

    /// SYSCFG interrupt line 5 status register
    @RegisterBlock(offset: 0x94)
    public var syscfg_itline5: Register<SYSCFG_ITLINE5>

    /// SYSCFG interrupt line 6 status register
    @RegisterBlock(offset: 0x98)
    public var syscfg_itline6: Register<SYSCFG_ITLINE6>

    /// SYSCFG interrupt line 7 status register
    @RegisterBlock(offset: 0x9c)
    public var syscfg_itline7: Register<SYSCFG_ITLINE7>

    /// SYSCFG interrupt line 9 status register
    @RegisterBlock(offset: 0xa4)
    public var syscfg_itline9: Register<SYSCFG_ITLINE9>

    /// SYSCFG interrupt line 10 status register
    @RegisterBlock(offset: 0xa8)
    public var syscfg_itline10: Register<SYSCFG_ITLINE10>

    /// SYSCFG interrupt line 11 status register
    @RegisterBlock(offset: 0xac)
    public var syscfg_itline11: Register<SYSCFG_ITLINE11>

    /// SYSCFG interrupt line 12 status register
    @RegisterBlock(offset: 0xb0)
    public var syscfg_itline12: Register<SYSCFG_ITLINE12>

    /// SYSCFG interrupt line 13 status register
    @RegisterBlock(offset: 0xb4)
    public var syscfg_itline13: Register<SYSCFG_ITLINE13>

    /// SYSCFG interrupt line 14 status register
    @RegisterBlock(offset: 0xb8)
    public var syscfg_itline14: Register<SYSCFG_ITLINE14>

    /// SYSCFG interrupt line 16 status register
    @RegisterBlock(offset: 0xc0)
    public var syscfg_itline16: Register<SYSCFG_ITLINE16>

    /// SYSCFG interrupt line 19 status register
    @RegisterBlock(offset: 0xcc)
    public var syscfg_itline19: Register<SYSCFG_ITLINE19>

    /// SYSCFG interrupt line 21 status register
    @RegisterBlock(offset: 0xd4)
    public var syscfg_itline21: Register<SYSCFG_ITLINE21>

    /// SYSCFG interrupt line 22 status register
    @RegisterBlock(offset: 0xd8)
    public var syscfg_itline22: Register<SYSCFG_ITLINE22>

    /// SYSCFG interrupt line 23 status register
    @RegisterBlock(offset: 0xdc)
    public var syscfg_itline23: Register<SYSCFG_ITLINE23>

    /// SYSCFG interrupt line 25 status register
    @RegisterBlock(offset: 0xe4)
    public var syscfg_itline25: Register<SYSCFG_ITLINE25>

    /// SYSCFG interrupt line 27 status register
    @RegisterBlock(offset: 0xec)
    public var syscfg_itline27: Register<SYSCFG_ITLINE27>

    /// SYSCFG interrupt line 28 status register
    @RegisterBlock(offset: 0xf0)
    public var syscfg_itline28: Register<SYSCFG_ITLINE28>
}

extension SYSCFG {
    /// SYSCFG configuration register 1
    @Register(bitWidth: 32)
    public struct SYSCFG_CFGR1 {
        /// Memory mapping selection bits
        /// This bitfield controlled by software selects the memory internally mapped at the address 0x0000 0000. Its reset value is determined by the boot mode configuration. Refer to for more details.
        /// x0: Main Flash memory
        @ReadWrite(bits: 0..<2)
        public var mem_mode: MEM_MODE

        /// PA11 pin remapping
        /// This bit is set and cleared by software. When set, it remaps the PA11 pin to operate as PA9 GPIO port, instead as PA11 GPIO port.
        @ReadWrite(bits: 3..<4)
        public var pa11_rmp: PA11_RMP

        /// PA12 pin remapping
        /// This bit is set and cleared by software. When set, it remaps the PA12 pin to operate as PA10 GPIO port, instead as PA12 GPIO port.
        @ReadWrite(bits: 4..<5)
        public var pa12_rmp: PA12_RMP

        /// IR output polarity selection
        @ReadWrite(bits: 5..<6)
        public var ir_pol: IR_POL

        /// IR Modulation Envelope signal selection
        /// This bitfield selects the signal for IR modulation envelope:
        @ReadWrite(bits: 6..<8)
        public var ir_mod: IR_MOD

        /// Fast Mode Plus (FM+) enable for PB6
        /// This bit is set and cleared by software. It enables I2C FM+ driving capability on PB6 I/O port.
        /// With this bit in disable state, the I2C FM+ driving capability on this I/O port can be enabled through one of I2Cx_FMP bits. When I2C FM+ is enabled, the speed control is ignored.
        @ReadWrite(bits: 16..<17)
        public var i2c_pb6_fmp: I2C_PB6_FMP

        /// Fast Mode Plus (FM+) enable for PB7
        /// This bit is set and cleared by software. It enables I2C FM+ driving capability on PB7 I/O port.
        /// With this bit in disable state, the I2C FM+ driving capability on this I/O port can be enabled through one of I2Cx_FMP bits. When I2C FM+ is enabled, the speed control is ignored.
        @ReadWrite(bits: 17..<18)
        public var i2c_pb7_fmp: I2C_PB7_FMP

        /// Fast Mode Plus (FM+) enable for PB8
        /// This bit is set and cleared by software. It enables I2C FM+ driving capability on PB8 I/O port.
        /// With this bit in disable state, the I2C FM+ driving capability on this I/O port can be enabled through one of I2Cx_FMP bits. When I2C FM+ is enabled, the speed control is ignored.
        @ReadWrite(bits: 18..<19)
        public var i2c_pb8_fmp: I2C_PB8_FMP

        /// Fast Mode Plus (FM+) enable for PB9
        /// This bit is set and cleared by software. It enables I2C FM+ driving capability on PB9 I/O port.
        /// With this bit in disable state, the I2C FM+ driving capability on this I/O port can be enabled through one of I2Cx_FMP bits. When I2C FM+ is enabled, the speed control is ignored.
        @ReadWrite(bits: 19..<20)
        public var i2c_pb9_fmp: I2C_PB9_FMP

        /// Fast Mode Plus (FM+) enable for I2C1
        /// This bit is set and cleared by software. It enables I2C FM+ driving capability on I/O ports configured as I2C1 through GPIOx_AFR registers.
        /// With this bit in disable state, the I2C FM+ driving capability on I/O ports configured as I2C1 can be enabled through their corresponding I2Cx_FMP bit. When I2C FM+ is enabled, the speed control is ignored.
        @ReadWrite(bits: 20..<21)
        public var i2c1_fmp: I2C1_FMP

        /// Fast Mode Plus (FM+) enable for PA9
        /// This bit is set and cleared by software. It enables I2C FM+ driving capability on PA9 I/O port.
        /// With this bit in disable state, the I2C FM+ driving capability on this I/O port can be enabled through one of I2Cx_FMP bits. When I2C FM+ is enabled, the speed control is ignored.
        @ReadWrite(bits: 22..<23)
        public var i2c_pa9_fmp: I2C_PA9_FMP

        /// Fast Mode Plus (FM+) enable for PA10
        /// This bit is set and cleared by software. It enables I2C FM+ driving capability on PA10 I/O port.
        /// With this bit in disable state, the I2C FM+ driving capability on this I/O port can be enabled through one of I2Cx_FMP bits. When I2C FM+ is enabled, the speed control is ignored.
        @ReadWrite(bits: 23..<24)
        public var i2c_pa10_fmp: I2C_PA10_FMP

        /// Fast Mode Plus (FM+) enable for PC14
        /// This bit is set and cleared by software. It enables I2C FM+ driving capability on PC14 I/O port.
        /// With this bit in disable state, the I2C FM+ driving capability on this I/O port can be enabled through one of I2Cx_FMP bits. When I2C FM+ is enabled, the speed control is ignored.
        @ReadWrite(bits: 24..<25)
        public var i2c_pc14_fmp: I2C_PC14_FMP
    }

    /// SYSCFG configuration register 2
    @Register(bitWidth: 32)
    public struct SYSCFG_CFGR2 {
        /// Cortex<Superscript>�<Default � Font>-M0+ LOCKUP enable
        /// This bit is set by software and cleared by system reset. When set, it enables the connection of Cortex<Superscript>�<Default � Font>-M0+ LOCKUP (HardFault) output to the TIM1/16/17 Break input.
        @ReadWrite(bits: 0..<1)
        public var lockup_lock: LOCKUP_LOCK
    }

    /// SYSCFG configuration register 3
    @Register(bitWidth: 32)
    public struct SYSCFG_CFGR3 {
        /// Pin GPIO multiplexer 0
        /// This bit is set by software and cleared by system reset. It assigns a GPIO to a pin.
        /// 1x: Reserved
        /// Pin F2 of WLCSP14 package GPIO assignment
        /// 1x: Reserved
        @ReadWrite(bits: 0..<2)
        public var pinmux0: PINMUX0

        /// Pin GPIO multiplexer 1
        /// This bit is set by software and cleared by system reset. It assigns a GPIO to a pin.
        /// 1x: Reserved
        @ReadWrite(bits: 2..<4)
        public var pinmux1: PINMUX1

        /// Pin GPIO multiplexer 2
        /// This bit is set by software and cleared by system reset. It assigns a GPIO to a pin.
        /// 1x: Reserved
        /// 1x: Reserved
        @ReadWrite(bits: 4..<6)
        public var pinmux2: PINMUX2

        /// Pin GPIO multiplexer 3
        /// This bit is set by software and cleared by system reset. It assigns a GPIO to a pin.
        /// 1x: Reserved
        @ReadWrite(bits: 6..<8)
        public var pinmux3: PINMUX3

        /// Pin GPIO multiplexer 4
        /// This bit is set by software and cleared by system reset. It assigns a GPIO to a pin.
        /// 1x: Reserved
        /// 1x: Reserved
        @ReadWrite(bits: 8..<10)
        public var pinmux4: PINMUX4

        /// Pin GPIO multiplexer 5
        /// This bit is set by software and cleared by system reset. It assigns a GPIO to a pin.
        /// 1x: Reserved
        @ReadWrite(bits: 10..<12)
        public var pinmux5: PINMUX5
    }

    /// SYSCFG interrupt line 0 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE0 {
        /// Window watchdog interrupt pending flag
        @ReadOnly(bits: 0..<1)
        public var wwdg: WWDG
    }

    /// SYSCFG interrupt line 2 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE2 {
        /// RTC interrupt request pending (EXTI line 19)
        @ReadOnly(bits: 1..<2)
        public var rtc: RTC
    }

    /// SYSCFG interrupt line 3 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE3 {
        /// Flash interface interrupt request pending
        @ReadOnly(bits: 1..<2)
        public var flash_itf: FLASH_ITF
    }

    /// SYSCFG interrupt line 4 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE4 {
        /// Reset and clock control interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var rcc: RCC
    }

    /// SYSCFG interrupt line 5 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE5 {
        /// EXTI line 0 interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var exti0: EXTI0

        /// EXTI line 1 interrupt request pending
        @ReadOnly(bits: 1..<2)
        public var exti1: EXTI1
    }

    /// SYSCFG interrupt line 6 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE6 {
        /// EXTI line 2 interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var exti2: EXTI2

        /// EXTI line 3 interrupt request pending
        @ReadOnly(bits: 1..<2)
        public var exti3: EXTI3
    }

    /// SYSCFG interrupt line 7 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE7 {
        /// EXTI line 4 interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var exti4: EXTI4

        /// EXTI line 5 interrupt request pending
        @ReadOnly(bits: 1..<2)
        public var exti5: EXTI5

        /// EXTI line 6 interrupt request pending
        @ReadOnly(bits: 2..<3)
        public var exti6: EXTI6

        /// EXTI line 7 interrupt request pending
        @ReadOnly(bits: 3..<4)
        public var exti7: EXTI7

        /// EXTI line 8 interrupt request pending
        @ReadOnly(bits: 4..<5)
        public var exti8: EXTI8

        /// EXTI line 9 interrupt request pending
        @ReadOnly(bits: 5..<6)
        public var exti9: EXTI9

        /// EXTI line 10 interrupt request pending
        @ReadOnly(bits: 6..<7)
        public var exti10: EXTI10

        /// EXTI line 11 interrupt request pending
        @ReadOnly(bits: 7..<8)
        public var exti11: EXTI11

        /// EXTI line 12 interrupt request pending
        @ReadOnly(bits: 8..<9)
        public var exti12: EXTI12

        /// EXTI line 13 interrupt request pending
        @ReadOnly(bits: 9..<10)
        public var exti13: EXTI13

        /// EXTI line 14 interrupt request pending
        @ReadOnly(bits: 10..<11)
        public var exti14: EXTI14

        /// EXTI line 15 interrupt request pending
        @ReadOnly(bits: 11..<12)
        public var exti15: EXTI15
    }

    /// SYSCFG interrupt line 9 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE9 {
        /// DMA1 channel 1interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var dma1_ch1: DMA1_CH1
    }

    /// SYSCFG interrupt line 10 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE10 {
        /// DMA1 channel 2 interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var dma1_ch2: DMA1_CH2

        /// DMA1 channel 3 interrupt request pending
        @ReadOnly(bits: 1..<2)
        public var dma1_ch3: DMA1_CH3
    }

    /// SYSCFG interrupt line 11 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE11 {
        /// DMAMUX interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var dmamux: DMAMUX
    }

    /// SYSCFG interrupt line 12 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE12 {
        /// ADC interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var adc: ADC
    }

    /// SYSCFG interrupt line 13 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE13 {
        /// Timer 1 commutation interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var tim1_ccu: TIM1_CCU

        /// Timer 1 trigger interrupt request pending
        @ReadOnly(bits: 1..<2)
        public var tim1_trg: TIM1_TRG

        /// Timer 1 update interrupt request pending
        @ReadOnly(bits: 2..<3)
        public var tim1_upd: TIM1_UPD

        /// Timer 1 break interrupt request pending
        @ReadOnly(bits: 3..<4)
        public var tim1_brk: TIM1_BRK
    }

    /// SYSCFG interrupt line 14 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE14 {
        /// Timer 1 capture compare interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var tim1_cc: TIM1_CC
    }

    /// SYSCFG interrupt line 16 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE16 {
        /// Timer 3 interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var tim3: TIM3
    }

    /// SYSCFG interrupt line 19 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE19 {
        /// Timer 14 interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var tim14: TIM14
    }

    /// SYSCFG interrupt line 21 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE21 {
        /// Timer 16 interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var tim16: TIM16
    }

    /// SYSCFG interrupt line 22 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE22 {
        /// Timer 17 interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var tim17: TIM17
    }

    /// SYSCFG interrupt line 23 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE23 {
        /// I2C1 interrupt request pending, combined with EXTI line 23
        @ReadOnly(bits: 0..<1)
        public var i2c1: I2C1
    }

    /// SYSCFG interrupt line 25 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE25 {
        /// SPI1 interrupt request pending
        @ReadOnly(bits: 0..<1)
        public var spi1: SPI1
    }

    /// SYSCFG interrupt line 27 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE27 {
        /// USART1 interrupt request pending, combined with EXTI line 25
        @ReadOnly(bits: 0..<1)
        public var usart1: USART1
    }

    /// SYSCFG interrupt line 28 status register
    @Register(bitWidth: 32)
    public struct SYSCFG_ITLINE28 {
        /// USART2 interrupt request pending (EXTI line 26)
        @ReadOnly(bits: 0..<1)
        public var usart2: USART2
    }
}
